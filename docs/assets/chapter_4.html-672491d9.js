import{_ as d,M as r,p as s,q as i,R as e,t,N as o,a1 as n}from"./framework-5866ffd3.js";const p="/book-game-development-renpy/assets/figure_4_1-54cabcdf.png",m={},l=n('<h1 id="глава-4-знакомимся-с-ren-py-twine-и-tyranobuilder" tabindex="-1"><a class="header-anchor" href="#глава-4-знакомимся-с-ren-py-twine-и-tyranobuilder" aria-hidden="true">#</a> Глава 4. Знакомимся с Ren’Py, Twine и TyranoBuilder</h1><p>В этой главе мы рассмотрим три инструмента для создания визуальных новелл: Ren’Py, Twine и TyranoBuilder. Хотя основное внимание в этой книге отдано Ren’Py, но также будет уделено достаточно времени и к двум другим движкам, чтобы познакомится с их пользовательскими интерфейсами, основными возможностями, и с подходами к разработке визуальных новелл.</p><p>Примеры в данной главе будут простыми, а в следующих главах мы рассмотрим более продвинутые методы разработки в виде трех мини-приключений.</p><p>И начнём мы с сравнением характеристик этих движков (см. таблицу 4-1).</p><p><strong>Таблица 4-1.</strong> Сравнительная таблица Ren’Py, Twine и TyranoBuilder</p><table><thead><tr><th>Инструмент</th><th>Лицензия</th><th>Поддержка ОС</th><th>Разработка на ОС</th><th>Лучше всего подходит для</th></tr></thead><tbody><tr><td><em>Ren’Py</em></td><td>Свободная</td><td>Windows, macOS, Linux, iOS, Android</td><td>Windows, macOS, Linux</td><td>Визуальных новелл</td></tr><tr><td><em>Twine</em></td><td>Свободная</td><td>Windows, macOS, iOS, Android, Linux, HTML5</td><td>Windows, macOS, Linux, online</td><td>Минималистической интерактивной художественной литературы с поддержкой визуальных элементов на основе CSS и JavaScript.</td></tr><tr><td><em>TyranoBuilder</em></td><td>$15 (2023)</td><td>Windows, macOS, iOS, Android</td><td>Windows, macOS</td><td>Визуальных новелл с продвинутой анимацией персонажей с использованием технологии Live2D</td></tr></tbody></table><h2 id="ren-py-в-деталях" tabindex="-1"><a class="header-anchor" href="#ren-py-в-деталях" aria-hidden="true">#</a> Ren&#39;Py в деталях</h2>',7),h={href:"https://www.renpy.org/",target:"_blank",rel:"noopener noreferrer"},u=n('<p>Данный игровой движок позволяет создавать как некоммерческие, так и коммерческие игры для разных платформ. Самые успешные созданные визуальные новеллы это <em>Doki Doki Literature Club!</em> и <em>Digital: A Love Story</em>. Кроме того, Ren’Py имеет огромное сообщество разработчиков и не мало активных форумов. Так же Ren’Py поддерживает большинство популярных форматов изображений и аудио.</p><p>Выйдя в 2004 году, Ren&#39;Py по-прежнему остается популярным инструментом для разработки визуальных новелл, а регулярно выходящие новые версии движка говорит о том, что проект активно развивается.</p><h3 id="как-работает-ren-py" tabindex="-1"><a class="header-anchor" href="#как-работает-ren-py" aria-hidden="true">#</a> Как работает Ren&#39;Py</h3><p>Ren’Py можно разделить на три компонента: лаунчер (см. рис. 4-1), файлы сценариев и аудиовизуальные элементы (то есть изображения и аудиофайлы). Лаунчер — это, по сути, менеджер проектов, который позволяет вам создавать и управлять игровыми проектами, над которыми вы работаеете.</p><p><img src="'+p+`" alt="Рисунок 4-1. Лаунчер Ren’Py"></p><p><strong>Рисунок 4-1.</strong> Лаунчер Ren’Py</p><p>Все файлы сценариев в Ren’Py имеют расширение <em>.rpy</em> (например: <em>script.rpy</em>). Это обычный текстовый файлы, который можно редактировать в любом текстовом редакторе, но сам Ren&#39;Py не имеет встроенного редактора для работы с файлами со скриптами. Однако, на сайте Ren’Py присутствует список рекомендуемых бесплатных текстовых редакторов.</p><h3 id="создание-нового-проекта" tabindex="-1"><a class="header-anchor" href="#создание-нового-проекта" aria-hidden="true">#</a> Создание нового проекта</h3><p>Чтобы создать проект нужно на панели лаунчера нажать «Добавить новый проект». Появиться окно, где нужно выбрать каталог, в котором будут сохранены все файлы игры. На следующем шаге вам будет предложено указать название проекта.</p><p>Далее вам нужно выбрать расширение экрана. По умолчанию предлагаются следующие расширения 1280x720 (HD), 1920x1080 (Full HD), 2560x1440 (Quad HD), 3840x2160 (4K) или «Своё». Выбор обычно зависит от размера используемой графики в художественном произведении. Естественно, лучше подобрать оптимальный масштаб изображений для проекта. Например, на данный момент самым распространённым расширение мониторов является 1920x1080 (Full HD), в результате на мониторах 1280x720 игра будет выглядеть отлично, но хуже на мониторах с большими расширениями. Так же игры с указанным расширением способны запуститься на более старых компьютерах, поскольку такие проекты не требовательны к характеристикам оборудования, по с сравнением 3D играми.</p><p>В конце вам будет предложено выбрать цветовую схему для игры. Выбирайте ту, которая лучше всего соответствует вашему проекту, её можно будет изменить позже если это потребуется. После это будет создан проекта, который появиться в списке проектов лаунчера.</p><p>Для запуска игры достаточно нажать «Запустить проект».</p><h3 id="функционал-ren-py" tabindex="-1"><a class="header-anchor" href="#функционал-ren-py" aria-hidden="true">#</a> Функционал Ren&#39;Py</h3><p>Лаунчер выступает основным инструментов для управления проектами в Ren&#39;Py. Хотя доступ к директории и файлам проекта можно получить через обыкновенный проводник или файловый менеджер, но удобней это будет делать через лаунчер. Давайте познакомимся с его основными возможностями (см. таблицу 4-2).</p><p><strong>Таблица 4-2.</strong> Возможности лаунчера Ren&#39;Py</p><table><thead><tr><th>Действие</th><th>Описание</th><th>Используется для</th></tr></thead><tbody><tr><td><em>Навигация по сценарию</em></td><td>Позволяет быстро находить файлы и другие элементы в вашем проекте</td><td>Позволяет добавить файл сценария</td></tr><tr><td><em>Проверить скрипт (Lint)</em></td><td>Запускает Lint, чтобы проверить игровые скрипты на содержание ошибок</td><td>Желательно запускать, каждый раз перед сборкой вашего проекта</td></tr><tr><td><em>Изменить/Обновить GUI</em></td><td>Позволяет изменить цветовую схему пользовательского интерфейса</td><td>Используется, когда меняется дизайн визуальной новеллы</td></tr><tr><td><em>Очистить постоянные</em></td><td>Удаляет сохранения и другие временные данные игр</td><td>Тестирование игры с нуля</td></tr><tr><td><em>Перекомпилировать проект</em></td><td>Перекомпилирует все файлы скриптов в проекте</td><td>Используется для устранения дефектов в скомпилированных скриптах или импорта проекта из старой версии Ren’Py в новую</td></tr><tr><td><em>Построить дистрибутивы</em></td><td>Создает исполняемый файл игры (например, для ПК, macOS, Linux)</td><td>Используется для распространения игр на указанных вами платформах</td></tr><tr><td><em>Android</em></td><td>Запускает процесс экспорта проекта на Android, при помощи установленного бесплатного инструмент Ren’Py для упаковки Android (RAPT)</td><td>Позволяет выпустить визуальную новеллу для платформы Android</td></tr><tr><td><em>iOS</em></td><td>Запускает процесс экспорта проекта для iOS путем установки бесплатного инструмента Renios</td><td>Позволяет выпустить визуальную новеллу для платформы iOS (iPad, iPhone)</td></tr><tr><td><em>Создать переводы</em></td><td>Создает переводы текстов в игре на другие языки</td><td>Используется, когда возникает необходимость выпустить игру на дополнительных рынках</td></tr><tr><td><em>Извлечь диалог</em></td><td>Экспорт внутри игровых диалогов (или другого текста) в текстовых файл или в файл электронной таблицы</td><td>Позволяет корректорам и другим членам команды прочитать материал, не играя в игру</td></tr></tbody></table><p>Как видно, Ren’Py довольно многофункционален. Сперва он может показаться сложным для новичка, но после ознакомления с основными принципами работы программы, придёт понимание, что они не так уже и сложны. Со временем имея достаточно мотивации, вы научитесь использовать мультиязычность и собирать проект для Android.</p><h3 id="основы-в-написания-сценариев-на-ren-py" tabindex="-1"><a class="header-anchor" href="#основы-в-написания-сценариев-на-ren-py" aria-hidden="true">#</a> Основы в написания сценариев на Ren’Py</h3><p>Ren’Py имеет гибкий и простой язык сценариев, с которым мы сейчас познакомимся на основе приведённого ниже простого примера.</p><blockquote><p><strong>Примечание:</strong></p><p>Имена файлов с изображениями персонажей должны быть короткие и понятные к каким героям они относятся. Например, в нашем небольшом скрипте изображение Маркуса имеет название mar.png, то есть оно сокращено, и соответствует имени определённое в скрипте. Также файлы должны быть помещены в каталог с изображениями вашего проекта.</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>init<span class="token punctuation">:</span>
    $ mar <span class="token operator">=</span> Character<span class="token punctuation">(</span><span class="token string">&#39;Маркус&#39;</span><span class="token punctuation">)</span>
    image home <span class="token operator">=</span> Image<span class="token punctuation">(</span><span class="token string">&quot;home_of_markus.jpg&quot;</span><span class="token punctuation">)</span>
    image markus happy <span class="token operator">=</span> Image<span class="token punctuation">(</span><span class="token string">&quot;markus_happy.png&quot;</span><span class="token punctuation">)</span>
    image markus sad <span class="token operator">=</span> Image<span class="token punctuation">(</span><span class="token string">&quot;markus_sad.png&quot;</span><span class="token punctuation">)</span>
label start<span class="token punctuation">:</span>
    scene home
    show markus happy
    mar <span class="token string">&quot;Вот я дома и счастлив!&quot;</span>
    hide markus happy
    show markus sad
    mar <span class="token string">&quot;Но похоже молоко закончилось.&quot;</span>
    <span class="token string">&quot;Маркус явно расстроился из-за отсутствия молока.&quot;</span>
    hide markus happy
    show mar
    mar <span class="token string">&quot;Не поздно ли идти в продуктовый магазин?&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Как видим скрипт начинается с оператора инициализации <em>init:</em>, где мы задаем изображения для фона и персонажей. В наведённом примере, изображение <em>home_of_markus.jpg</em> связано с переменной <em>home</em>. Всякий раз, когда нужно показать, что наш герой находится дома достаточно вызвать переменную под именем home, вместо длинного имени файла <em>home_of_markus.jpg</em>.</p><p>Аналогично, когда нам нужно изобразить эмоциональное состояние Маркуса, например, грустного или счастливого, мы соответственно задаём переменные, которым присваиваем изображения грустного и счастливого Маркуса, и чтобы показать счастливого главного героя нужно написать команду &quot;show markus happy&quot;. Это позволяет не использовать длинные имена файлов, сократить код, держать его чистым и понятным для чтения. Вы можете применять другие эмоции, так как Ren’Py не имеет на них ограничения.</p><p>Одним из основным оператором в Ren’Py являются метки, которые позволяют выполнить переход по сценарию игры или используются для создания меню выбора. То есть по сути метки можно сравнить с понятием сцены, которые могут меняться по ходу игры. В нашем примере, игра начинается с метки <em>label start:</em>. Так как сценарий простой в нем нет других меток или вариантов выбора, пользователь просто щелкает, переходя от одного диалога к другому. Имена меток могут быть любые, например, <em>label work:</em> или <em>label holiday:</em>.</p><p>После метки <em>start:</em> идет оператор по выводу фона и изображения счастливого Маркуса. Далее выводится текст &quot;Вот я дома и счастлив!&quot;, <em>помеченный оператором символа</em> (<em>character definition statement</em>) mar, который был инициализирован в разделе <em>init:</em> командой <em>Character(&#39;Маркус&#39;)</em>. Простыми словами, мы создали героя <em>Маркус</em> и связываем все его диалоги при помощи переменной mar.</p><p>Далее мы рассмотрим некоторые основные элементы языка Ren&#39;Py в таблице 4-3.</p><p><strong>Таблица 4-3.</strong> Ключевые элементы языка Ren’Py</p><table><thead><tr><th>Элемент/Объявление</th><th>Описание</th><th>Пример использования</th></tr></thead><tbody><tr><td>init:</td><td>Метка инициализации. Используется для объявления псевдонимов имен файлов и других постоянных данных. Обычно используется для изображений.</td><td>init:<br> image garage = Image(&quot;garage.jpg&quot;)</td></tr><tr><td>image</td><td>Используется для определения псевдонимов для файлов изображений.</td><td>image billy happy = Image(&quot;billy.jpg&quot;)<br> image billy angry = Image(&quot;billy2.jpg&quot;)</td></tr><tr><td>label</td><td>Используется для создания метки перехода по сценарию игры.</td><td>label garage:<br> &quot;We&#39;re in the garage!&quot;</td></tr><tr><td><em>Макрос персонажа</em></td><td>Используется для создания короткого псевдонима игровому персонажу.</td><td>$ b = Character(&#39;Billy&#39;)<br> $ c = Character(&#39;Christopher&#39;)</td></tr><tr><td>scene</td><td>Удаляет все отображаемые объекты с экрана перед вызовом новых.</td><td>scene garage</td></tr><tr><td>show</td><td>Показывает изображение персонажа. Так же можно указывать дополнительное описание, например, «Джеймс счастлив» или «Джеймс злой».</td><td>show billy happy</td></tr><tr><td>hide</td><td>Скрывает изображение персонажа.</td><td>hide billy happy</td></tr><tr><td><em>Произнести фразу</em></td><td>Выводит текст на экран или выводит текст принадлежащий персонажу назначенный с помощью макроса персонажей.</td><td>&quot;Стояла тишина.&quot;<br> b &quot;Кристофер! Ты здесь?&quot;<br> c &quot;Да, Билли. Я здесь.&quot;</td></tr><tr><td><em>Переходы</em></td><td>Для мягкого появления изображений в сцене используются переходы, например, затухание или растворение. Вызывается эти эффекты оператором <em>with</em>.</td><td>show billy angry<br> with fade<br> hide billy angry<br> with dissolve</td></tr><tr><td>play sound</td><td>Воспроизводит звуковой файл.</td><td>play sound &quot;soundfx1.ogg&quot;</td></tr><tr><td>pause</td><td>Ставит игру на паузу до щелчка мыши. Если указано число, пауза закончится через указанное количество секунд.</td><td>pause 2.0</td></tr></tbody></table><h3 id="взаимодеиствуем-с-пользователем-меню" tabindex="-1"><a class="header-anchor" href="#взаимодеиствуем-с-пользователем-меню" aria-hidden="true">#</a> Взаимодействуем с пользователем: Меню</h3>`,29);function c(y,b){const a=r("ExternalLinkIcon");return s(),i("div",null,[l,e("p",null,[t("Ren’Py — это мощный инструмент, разработанный исключительно для написания визуальных новелл, а благодаря языку программирования Python позволяет создать более сложные игры. Данное программное обеспечение распространяется бесплатно, и его можно скачать по ссылке: "),e("a",h,[t("https://www.renpy.org/"),o(a)]),t(".")]),u])}const k=d(m,[["render",c],["__file","chapter_4.html.vue"]]);export{k as default};
