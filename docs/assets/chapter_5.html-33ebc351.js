import{_ as t,p as e,q as d,a1 as n}from"./framework-5866ffd3.js";const a={},s=n(`<h1 id="глава-5-погружаемся-глубже" tabindex="-1"><a class="header-anchor" href="#глава-5-погружаемся-глубже" aria-hidden="true">#</a> Глава 5. Погружаемся глубже</h1><p>Дойдя до этой главы, вы уже усвоили базовые теоретические и практические знания по <em>Ren’Py</em>, <em>Twine</em> и <em>TyranoBuilder</em>. Теперь познакомимся с более сложными инструментами, которые имеются в рассматриваемом программном обеспечении. Например, разберём, как интегрировать видео в Ren’Py, как улучшить игры на Twine при помощи каскадных таблиц стилей (CSS), и как создать произвольный диалог в TyranoBuilder.</p><h2 id="ren-py-контеинеры-и-кодеки" tabindex="-1"><a class="header-anchor" href="#ren-py-контеинеры-и-кодеки" aria-hidden="true">#</a> Ren’Py, контейнеры и кодеки</h2><p>Информация о форматах видео, по сути, не касается Ren’Py, TyranoBuilder или Twine, но она может оказаться полезной при работе с аудиовизуальными эффектами в проекте.</p><p>Видео (и аудио) файл обычно состоит из двух компонентов это контейнер и кодек. Контейнер — это файл, который содержит в себе видео, аудио и субтитры. В свою очередь кодек является инструментом для сжатия и распаковки видеофайла внутри контейнера. Существует многое количество кодеков, которые различаются между собой качеством и коэффициентом сжатия. Самыми популярными форматы контейнеров являются <em>.ogg</em>, <em>.webm</em> и <em>.avi</em>, и соответственно они имеют поддержку на многих платформах как на настольных, так и на мобильных.</p><p>Что касается кодеков, то хорошим выбором является <em>H.264</em> (известный как <em>MPEG-4</em>), <em>MPEG-2</em> и <em>MPEG-1</em>. Данный формат был разработан в 1988 году <em>Хироси Ясудой</em> и <em>Леонардо Кьярильоне</em>, а аббревиатура <em>MPEG (Moving Picture Experts Group)</em> расшифровывается как <em>Экспертная группа по движущимся изображениям</em>.</p><p>Давайте, используя таблицу 5-1, сравним самые распространённые кодеки:</p><p><strong>Таблица 5-1.</strong> Наиболее распространенные видеокодеки</p><table><thead><tr><th>Кодек</th><th>Лицензия</th><th>Дата релиза</th><th>Особенности</th></tr></thead><tbody><tr><td><em>VP9</em></td><td>Свободная</td><td>2012</td><td>Поддержка видео высокого разрешения (например, 4K/8K UHD), опция сжатия без потерь</td></tr><tr><td><em>VP8</em></td><td>Свободная</td><td>2008</td><td>Поддержка многопроцессорности. Свободный доступ для редактирования видео. Лучше всего использовать для видео с низким разрешением</td></tr><tr><td><em>Theora</em></td><td>Свободная</td><td>2004</td><td>Поддерживает потоковую передачу видео через Интернет, достоянная картинка при низком битрейте</td></tr><tr><td><em>H.264 (MPEG-4)</em></td><td>Бесплатная для использования в Интернете</td><td>2003</td><td>Эффективен для потокового видео через Интернет, поддерживает разрешение до 8192 × 4320 (включая 8K UHD)</td></tr><tr><td><em>Xvid, бесплатная реализация MPEG-4 part 2</em></td><td>Свободная (Универсальная общественная лицензия GNU)</td><td>2001</td><td>Оптимизирована производительность, широкая поддержка</td></tr><tr><td><em>MPEG-2</em></td><td>Все американские патенты MPEG-2 истекли 13 февраля 2019 года</td><td>1996</td><td>Формат золотой стандарт DVD, может включать объемный звук 5.1</td></tr><tr><td><em>MPEG-1</em></td><td>Свободная (срок действия патентов истек)</td><td>1989</td><td>Хорошо работает с видео с низким битрейтом (например, для небольших дисплеев), принимая во внимание как качество изображения, так и небольшой размер файла.</td></tr></tbody></table><p>Теперь при помощи таблицы 5-2 сравним форматы контейнеров:</p><p><strong>Таблица 5-2.</strong> Наиболее распространенные видео контейнеры</p><table><thead><tr><th>Формат контейнера</th><th>Лицензия</th><th>Дата релиза</th><th>Поддерживаемые кодеки</th></tr></thead><tbody><tr><td><em>WebM</em></td><td>Свободная</td><td>2010</td><td>Видео VP8 и VP9, аудио Ogg Vorbis и Opus audio</td></tr><tr><td><em>Matroska</em></td><td>Свободная</td><td>2002</td><td>Любой</td></tr><tr><td><em>Ogg</em></td><td>Свободная</td><td>1993</td><td>Видео Theora и Dirac. Аудио Opus, Vorbis и Speex</td></tr><tr><td><em>MPEG-контейнер (не путать с MPEG-кодеками)</em></td><td>Ограниченна</td><td>1993</td><td>Видео MPEG-1 и MPEG-2. Аудио MPEG-1 Layers 1, 2, и 3 (то есть mp3)</td></tr><tr><td><em>AVI</em></td><td>Относительно свободная</td><td>1992</td><td>В основном содержит несжатое видео (Full Frame), Intel Real Time (Indeo) и Cinepak</td></tr></tbody></table><h3 id="видео-в-ren-py" tabindex="-1"><a class="header-anchor" href="#видео-в-ren-py" aria-hidden="true">#</a> Видео в Ren’Py</h3><p>Воспроизвести видео в Ren’Py относительно простая задача. Благодаря поддержке нескольких широко распространённых видеоформатов, вам не придётся прибегать к трудному процессу преобразованию видео из одного формата в другой.</p><p>Следующая строка кода, добавленная в сценарий, воспроизведёт видео во весь размер окна игры:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ renpy<span class="token punctuation">.</span>movie_cutscene<span class="token punctuation">(</span><span class="token string">&quot;introvideo.webm&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Видео будет проигрываться до тех пор, пока не достигнет своего конца или пока игрок не щелкнет мышью. Но этим Ren’Py не ограничивается. Вы можете использовать видео как фон или как изображение персонажа.</p><p>Давайте рассмотрим пример:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    image markus movie <span class="token operator">=</span> Movie<span class="token punctuation">(</span>play<span class="token operator">=</span><span class="token string">&quot;markus_movie.webm&quot;</span><span class="token punctuation">,</span> mask<span class="token operator">=</span><span class="token string">&quot;markus_mask.webm&quot;</span><span class="token punctuation">)</span>
    show markus movie
    <span class="token string">&quot;Разве это не весело?&quot;</span>
    hide markus movie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Данный код в первой строке определяет <em>видео спрайт</em> (<em>movie sprite</em>) с именем &quot;markus&quot;, которому присваивается видеофайл <em>markus_movie.webm</em>. Далее командой show воспроизводиться видео. Потом выводиться диалог, а затем видео скрывается командой hide.</p><p>Как мы знаем видео имеет квадратную или прямоугольную форму и не имеет прозрачности. Чтобы скрыть нежелательные края или фон в видео спрайте во время вызова метода Movie указывается параметр <em>mask</em> (<em>маска</em>). <em>Маска</em> – это видео такого же размера и продолжительности, что и видео, с которым она связана.</p><p>Что касается Ren’Py, то в маске белый цвет обозначает видимую область, а черный — область, которую нужно скрыть.</p><h3 id="расширенные-функции-аудио-в-ren-py" tabindex="-1"><a class="header-anchor" href="#расширенные-функции-аудио-в-ren-py" aria-hidden="true">#</a> Расширенные функции аудио в Ren’Py</h3><p>Во время разработки игры возникает потребность одновременно воспроизводить фоновую музыку, звуковые эффекты, голоса персонажей. Для это в Ren&#39;Py используется подход, при котором один аудиоканал используется для воспроизведения музыки, второй для звука, и ещё один для голоса. Каждый из этих каналов воспроизводит по одному аудиофайлу за раз. Если вам потребуется дополнительный аудиоканал вы можете его создать. Как это сделать будет показано далее в книге.</p><p>Нижеприведённом примере используются сразу все три канала для одновременного воспроизведения песни, звукового эффекта и диалога.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    play music <span class="token string">&quot;song1.ogg&quot;</span>
    play sound <span class="token string">&quot;boom.mp3&quot;</span>
    voice <span class="token string">&quot;dialogue1.ogg&quot;</span>
    <span class="token string">&quot;Привет, как ты?&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ren’Py поддерживает <em>.wav</em>, <em>.ogg</em>, <em>.mp3</em> и <em>Opus</em> форматы. Из них формат .wav (который является стандартным аудио форматом для компакт-дисков), пожалуй, самый громоздкий, так как не имеет сжатия, его не рекомендуется для использования в релизной версии игры. Никто не любит, когда игра занимает много дискового пространства, а особенно когда она распространяется через Интернет (то есть будет долго загружаться). Наилучшее применение .wav формата – это когда звук находится на стадии обработки, и только после выполнения всех работ, его можно сохранить в формат с элементом сжатие. Имейте виду, при сжатии идёт потеря качества аудиодорожки, в результате вы получаете копию, а не оригинал. Если это повторить несколько раз, то качество звука сильно упадёт.</p><h4 id="аудио-очереди" tabindex="-1"><a class="header-anchor" href="#аудио-очереди" aria-hidden="true">#</a> Аудио очереди</h4><p>Игра будет более приятно восприниматься, когда в место одной короткой повторяющейся мелодии будет плейлист с разнообразной музыкой. Это можно легко сделать в Ren’Py при помощи метода <em>queue</em>. В примере показано, как создается очередь из трех мелодий (в формате .ogg) для музыкального канала.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>queue music <span class="token punctuation">[</span> <span class="token string">&quot;song1.ogg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;song2.ogg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;happysong.ogg&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="параметры-операторов-воспроизведения-и-остановки" tabindex="-1"><a class="header-anchor" href="#параметры-операторов-воспроизведения-и-остановки" aria-hidden="true">#</a> Параметры операторов воспроизведения и остановки</h4><p>Оператор play не ограничивается простым открытием файла и его воспроизведением. Например, вы можете передать в него очередь аудиофайлов, задать затухание в начале и в конце.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>play music <span class="token punctuation">[</span> <span class="token string">&quot;song1.mp3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;song2.mp3&quot;</span> <span class="token punctuation">]</span> fadeout <span class="token number">2.0</span> fadein <span class="token number">2.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Если вы хотите остановить воспроизведение музыкального канала с затуханием длиной в 10 секунд, то нужно в операторе stop указать следующие параметры:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>stop music fadeout <span class="token number">10.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Если вам когда-нибудь понадобится вставить паузу перед воспроизведением, то воспользуйтесь тегом silence (тишина) с параметром длительность тишины в секундах.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>play audio <span class="token punctuation">[</span> <span class="token string">&quot;&lt;silence 2.5&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;song1.mp3&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="воспроизводим-произвольную-часть-аудиофаила" tabindex="-1"><a class="header-anchor" href="#воспроизводим-произвольную-часть-аудиофаила" aria-hidden="true">#</a> Воспроизводим произвольную часть аудиофайла</h4><p>Ren’Py при помощи оператора from позволяет прослушать часть аудиофайла. В приведённом примере воспроизводиться аудио <em>song1.mp3</em> с 2,5 секунды до 10,5 секунды.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>play music <span class="token string">&quot;&lt;from 2.5 to 10.5&gt;song1.mp3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="подробнеи-о-графике" tabindex="-1"><a class="header-anchor" href="#подробнеи-о-графике" aria-hidden="true">#</a> Подробней о графике</h3><p>Ren&#39;Py может не только скрывать и показывать изображения, а имеет ряд дополнительных методов для работы с ними. Давайте познакомимся с наиболее полезными.</p><h4 id="цвет-диалога" tabindex="-1"><a class="header-anchor" href="#цвет-диалога" aria-hidden="true">#</a> Цвет диалога</h4><p>В предыдущей главе мы уже встречались с инициализацией персонажа и это выглядело так:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ m <span class="token operator">=</span> Character<span class="token punctuation">(</span><span class="token string">&#39;Маркус&#39;</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&quot;#EE1100&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Но в этот раз мы указали свойство color, которое задает цвет диалога персонажа в виде шестнадцатеричного значения. Оно в свою очередь состоит из красного, зеленого и синего цвета (т. е. RGB). Первые два символа после хэштега (#) задают значение красного цвета, третий и четвертый задают значение зеленого, а остальные символы задают значение синего цвета. Так как шестнадцатеричная система в качестве цифр счисления использует цифры от 0 до 9 и латинские буквы от A до F, то мы видим буквенные значения в определении цвета.</p><p>Такую же цветовую модель используют в HTML, CSS и во всех игровых движках, описанных в этой книге. В нашем примере персонажу Маркуса указывается красный цвет диалога с вкраплением зелёного.</p><p>Давайте познакомимся с наиболее распространёнными цветами типа RGB (см. Таблице 5-3).</p><p><strong>Таблица 5-3.</strong> Наиболее популярные RGB цвета</p><table><thead><tr><th>Цвет</th><th>Шестнадцатеричное значение</th></tr></thead><tbody><tr><td><em>Черный</em></td><td>#000000</td></tr><tr><td><em>Белый</em></td><td>#FFFFFF</td></tr><tr><td><em>Серый</em></td><td>#808080</td></tr><tr><td><em>Зеленый</em></td><td>#008000</td></tr><tr><td><em>Синий</em></td><td>#0000FF</td></tr><tr><td><em>Желтый</em></td><td>#FFFF00</td></tr><tr><td><em>Красный</em></td><td>#FF0000</td></tr><tr><td><em>Фиолетовый</em></td><td>#800080</td></tr><tr><td><em>Апельсин</em></td><td>#FFA500</td></tr><tr><td><em>Берливуд</em></td><td>#DEB887</td></tr></tbody></table><h4 id="выравниваем-изображения" tabindex="-1"><a class="header-anchor" href="#выравниваем-изображения" aria-hidden="true">#</a> Выравниваем изображения</h4><p>Если вам нужно отцентрировать изображение в независимости от позиции в пикселях, то укажите следующие параметры <em>xalign</em> и <em>yalign</em>. Параметр xalign задает выравнивание по горизонтали, если указать 0,0 — изображение выровняется по левому краю, если указать 0,5 — то по центру, если 1,0 — то по правому краю. Соответственно параметр yalign выполняет выравнивание по вертикали, если указать 0,0 – выполниться выравнивание по верхнему краю, 0,5 — по центру, а значение 1,0 выровняет изображение по нижнему краю экрана.</p><p>В следующей строке кода загружается файла <em>man.png</em>, который при выводе на экран отображаться в нижнем правом углу.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>image man right <span class="token operator">=</span> Image<span class="token punctuation">(</span><span class="token string">&quot;man.png&quot;</span><span class="token punctuation">,</span> xalign<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> yalign<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="добавляем-переходы" tabindex="-1"><a class="header-anchor" href="#добавляем-переходы" aria-hidden="true">#</a> Добавляем переходы</h4><p>Ren’Py имеет набор переходов между сценами. Чтобы их применить используется функция <em>with</em>. Если нужно настроить переходы для глобальных элементов игры используйте конфигурационные файлы <em>gui.rpy</em> или <em>options.rpy</em>.</p><p>Рассмотрим пример использования перехода:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>show bg garage
<span class="token keyword">with</span> dissolve
<span class="token string">&quot;Черт возьми! Эрни! Мы в гараже!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Как видим скрипт выводит фоновое изображение гаража, используя классический переход <em>dissolve</em> (<em>растворение</em>).</p><p>Теперь давайте рассмотрим какие есть ещё переходы в Ren’Py (см. Таблицу 5-4).</p><p><strong>Таблица 5-4.</strong> Основные визуальные переходы в Ren’Py</p><table><thead><tr><th>Переход</th><th>Описание</th></tr></thead><tbody><tr><td><em>dissolve</em></td><td>Изображение исчезает или показывается с затуханием</td></tr><tr><td><em>fade</em></td><td>Изображение, темнея исчезает или появляется из темноты</td></tr><tr><td><em>pixellate</em></td><td>Изображение пикселизируется при исчезновении или депикселизируется при появлении</td></tr><tr><td><em>blinds</em></td><td>Смена сцены при помощи эффекта &quot;вертикальные жалюзи&quot;</td></tr><tr><td><em>zoomin</em></td><td>Новое изображение появляется с эффектом увеличения</td></tr><tr><td><em>zoominout</em></td><td>Изображение исчезает с эффектом уменьшения</td></tr><tr><td><em>move</em></td><td>Анимирует перемещение изображения изменившее местоположение</td></tr><tr><td><em>slideawayleft</em>, <em>slideawayright</em>, <em>slideawayup</em>, <em>slideawaydown</em></td><td>Сдвигает старую сцену в заданном направлении</td></tr><tr><td><em>slideleft</em>, <em>slideright</em>, <em>slideup</em>, <em>slidedown</em></td><td>Сдвигает новую сцену в заданном направлении</td></tr><tr><td><em>Vpunch</em></td><td>При вызове этого перехода встряхивает экран в вертикальном направлении</td></tr><tr><td><em>Hpunch</em></td><td>При вызове этого перехода встряхивает экран в горизонтальном направлении</td></tr><tr><td><em>easeinleft</em>, <em>easeinright</em>, _easeintop, <em>easeinbottom</em></td><td>Похож на move, за исключением того, что скорость движения строится на основе кривой косинуса</td></tr><tr><td><em>irisin</em>, <em>irisout</em></td><td>Показывает новое изображение или скрывает текущее с помощью прямоугольника</td></tr><tr><td><em>Squares</em></td><td>Переход изображения квадратами</td></tr><tr><td><em>wipeleft</em>, <em>wiperight</em>, <em>wipeup</em>, <em>wipedown</em></td><td>Стирает изображение в указанном направлении</td></tr><tr><td><em>moveoutright</em>, <em>moveoutleft</em>, <em>moveouttop</em>, <em>moveoutbottom</em></td><td>Перемещает изображение за пределы экрана</td></tr><tr><td><em>moveinright</em>, <em>moveinleft</em>, <em>moveintop</em>, <em>moveinbottom</em></td><td>Переход выводит изображения на экран с соответствующей стороны</td></tr></tbody></table><p>Лучшим способом познакомиться с переходами в Ren’Py, — это, поэкспериментировать с ними. Никогда не знаешь, какую можно получить атмосферу в сцене комбинируя их.</p><h3 id="настроика-графического-интерфеиса-в-ren-py" tabindex="-1"><a class="header-anchor" href="#настроика-графического-интерфеиса-в-ren-py" aria-hidden="true">#</a> Настройка графического интерфейса в Ren’Py</h3><p>Все элементы графического интерфейса (GUI) в Ren’Py можно настроить, отредактировав файл <em>gui.rpy</em>. Доступ к нему можно получить через лаунчер в разделе <em>&quot;Редактировать файл&quot;</em>. Этот текстовый файл содержит множество настроек, давайте рассмотрим некоторые из них (см. Таблицу 5-5).</p><p><strong>Таблица 5-5.</strong> Полезные опции в файле <strong>gui.rpy</strong></p><table><thead><tr><th>Опция</th><th>Описание</th></tr></thead><tbody><tr><td><em>define gui.text_size</em></td><td>Размер текста диалога. По умолчанию: 22</td></tr><tr><td><em>define gui.text_color</em></td><td>Устанавливает цвет текста диалога. По умолчанию: белый (#ffffff)</td></tr><tr><td><em>define gui.textbox_height</em></td><td>Устанавливает высоту диалогового окна. По умолчанию: 185 пикселей</td></tr><tr><td><em>define gui.name_text_size</em></td><td>Задаёт размер имен персонажей. По умолчанию: 30</td></tr><tr><td><em>define gui.text_font</em></td><td>Определяет внутриигровой шрифт. Файл со шрифтом должен находиться в папке с игрой. По умолчанию: DejaVuSans.ttf</td></tr><tr><td><em>define gui.main_menu_background</em></td><td>Задаёт фоновое изображение главного меню игры. По умолчанию: &quot;gui/main_menu.png&quot;</td></tr><tr><td><em>define gui.game_menu_background</em></td><td>Задаёт фоновое изображение игровом меню игры. По умолчанию: &quot;gui/game_menu.png&quot;</td></tr><tr><td><em>define gui.title_text_size</em></td><td>Устанавливает размер заголовка игры. По умолчанию: 50</td></tr><tr><td><em>define gui.interface_text_size</em></td><td>Устанавливает размер текста в пользовательском интерфейсе. По умолчанию: 22</td></tr><tr><td><em>define gui.label_text_size</em></td><td>Устанавливает размер заголовка в пользовательском интерфейсе. По умолчанию: 24</td></tr></tbody></table><p>Файл gui.rpy — это не единственный файл, который позволяет настроить работу Ren’Py, ещё имеется <em>options.rpy</em>. Его так же можно открыть через лаунчер в разделе <em>&quot;Редактировать файл&quot;</em>. Давайте разберём некоторые настройки из этого файла и что они значат для визуальной новеллы (см. Таблицу 5–6).</p><p><strong>Таблица 5-6.</strong> Полезные опции в файле <strong>options.rpy</strong></p><table><thead><tr><th>Опция</th><th>Описание</th></tr></thead><tbody><tr><td><em>define gui.show_name</em></td><td>Определяет, показывать ли заголовок игры, на экране главного меню. По умолчанию: True</td></tr><tr><td><em>define config.has_sound</em></td><td>Показывает или скрывает звуковой микшер. По умолчанию: True</td></tr><tr><td><em>define config.has_music</em></td><td>Показывает или скрывает микшер музыки. По умолчанию: True</td></tr><tr><td><em>define config.has_voice</em></td><td>Показывает или скрывает микшер голоса в игре. По умолчанию: True</td></tr><tr><td><em>default preferences.text_cps</em></td><td>Контролирует скорость вывода текста. По умолчанию: 0 — мгновенно. Число больше нуля — это количество печатаемых символов в секунду.</td></tr><tr><td><em>default preferences.afm_time</em></td><td>Устанавливает задержку при авточтении. По умолчанию: 15. Допустимый диапазон значений от 0 до 30.</td></tr><tr><td><em>define config.window_icon</em></td><td>Иконка значка на панеле задач и рабочем столе. По умолчанию: &quot;gui/window_icon.png&quot;</td></tr><tr><td><em>define config.intra_transition</em></td><td>Задаёт типом перехода между экранами игрового меню. По умолчанию: dissolve</td></tr><tr><td><em>define config.enter_transition</em>, <em>define config.exit_transition</em></td><td>Управляет типом визуального перехода при входе и выходе из игрового меню. По умолчанию: dissolve</td></tr><tr><td><em>define config.after_load_transition</em></td><td>Устанавливает эффект перехода после загрузки игры. По умолчанию: None</td></tr></tbody></table><h2 id="продвинутые-функции-tyranobuilder" tabindex="-1"><a class="header-anchor" href="#продвинутые-функции-tyranobuilder" aria-hidden="true">#</a> Продвинутые функции TyranoBuilder</h2><p>Хотя TyranoBuilder кажется простым инструментом разработки, но на самом деле под его капотом скрываются мощные методы для создания игр. Давайте познакомимся с некоторыми из них.</p><h3 id="плагины" tabindex="-1"><a class="header-anchor" href="#плагины" aria-hidden="true">#</a> Плагины</h3><p>TyranoBuilder имеет возможность расширять свой функционал при помощи <em>плагинов</em>. Они могут быть как платные, так и бесплатные. На данный момент их уже существует десятки.</p><blockquote><p><strong>Примечание:</strong></p><p>Поддержка плагинов в TyranoBuilder была добавлена с версии 182.</p></blockquote><p>Познакомится с плагинами можно на странице: https://plugin.tyrano.jp/ или на https://plugin.tyrano.jp/en (английская версия).</p><p>Чтобы добавить плагин в TyranoBuilder, сперва его нужно загрузить с указанного выше ресурса. Затем в главном меню выбираем <em>Project\\Plugins</em> (<em>Проект\\Плагины</em>), после чего откроется диалоговое окно «Плагины». Далее нажимаем кнопку <em>Add New</em> (<em>Добавить новый</em>), и выбираем ранее загруженный файл с расширением <em>.tbp</em>.</p><p>Для того чтобы воспользоваться встроенными и загруженными плагинами в главном меню выбираем <em>Project\\Customize Tool Area</em> (<em>Проект\\Настройка области инструментов</em>). В появившемся диалоговом окне на вкладке <em>Components</em> (<em>Компоненты</em>) находим <em>Plugins</em> и ставим флажок. После нажатия кнопки <em>Apply</em> (<em>Применить</em>) на вкладке с компонентами появится новый раздел Plugins (Плагины).</p><p>Хотя плагинов может существовать разное множество, давайте познакомимся с некоторыми из них (см. Таблицу 5-7).</p><p><strong>Таблица 5-7.</strong> Плагины TyranoBuilder и назначение</p><table><thead><tr><th>Плагин</th><th>Описание</th><th>URL</th></tr></thead><tbody><tr><td><em>Background Mask Transitions</em></td><td>Плагин позволяет выполнять смену фона с использованием маски. Содержит в себе множество различных переходов</td><td>https://plugin.tyrano.jp/item/20007</td></tr><tr><td><em>Mask Transitions</em></td><td>Плагин позволяет добавить переходы на основе масок для персонажей. В комплекте 200 масок.</td><td>https://plugin.tyrano.jp/item/20014</td></tr><tr><td><em>Sleep and Awake</em></td><td>Позволяет игроку сохранить её и начать другой квест, а затем по своему желанию вернуться к исходному приключению.</td><td>https://plugin.tyrano.jp/item/20001</td></tr><tr><td><em>Custom Save Game Thumbnail</em></td><td>Позволяет установить миниатюры для сохранений игры вместо захваченных TyranoBuilder.</td><td>https://plugin.tyrano.jp/item/20002</td></tr><tr><td><em>Auto Save and Load</em></td><td>Добавляет компоненты, которые могут в игре выполнять автозагрузку и автосохранение.</td><td>https://plugin.tyrano.jp/item/20003</td></tr><tr><td><em>Show Dialogue</em></td><td>Выводит диалоговое окно подтверждения поверх всех элементов игры.</td><td>https://plugin.tyrano.jp/item/20009</td></tr><tr><td><em>Change Title</em></td><td>Позволяет изменить заголовок окна игры. Например, можно использовать для отображения названия каждой главы новеллы.</td><td>https://plugin.tyrano.jp/item/20010</td></tr><tr><td><em>Screen Filters</em></td><td>Добавляет компонент, который накладывает фильтр на экран игры. Включает в себя эффект размытия, прозрачности, оттенки серого, сепии, инверсию тонов.</td><td>https://plugin.tyrano.jp/item/20005</td></tr><tr><td><em>Open Website</em></td><td>Позволяет запустить браузер и открыть в нем веб-сайт.</td><td>https://plugin.tyrano.jp/item/20008</td></tr><tr><td><em>Sprite Sheets</em></td><td>Обеспечивает поддержку спрайтовой анимации. Имеет настройки: скорость воспроизведения, зацикливание и размер спрайтов.</td><td>https://plugin.tyrano.jp/item/20012</td></tr></tbody></table><h3 id="переменные" tabindex="-1"><a class="header-anchor" href="#переменные" aria-hidden="true">#</a> Переменные</h3>`,82),r=[s];function i(o,m){return e(),d("div",null,r)}const u=t(a,[["render",i],["__file","chapter_5.html.vue"]]);export{u as default};
